<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmallLog</title>
  
  <subtitle>Start from small thing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tuihub.cn/"/>
  <updated>2019-11-17T16:01:19.000Z</updated>
  <id>http://tuihub.cn/</id>
  
  <author>
    <name>SmallLog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git高效使用技巧</title>
    <link href="http://tuihub.cn/2019/11/17/GIT%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://tuihub.cn/2019/11/17/GIT高效使用技巧/</id>
    <published>2019-11-17T09:59:41.000Z</published>
    <updated>2019-11-17T16:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git高效使用技巧"><a href="#Git高效使用技巧" class="headerlink" title="Git高效使用技巧"></a>Git高效使用技巧</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Git是多么强大的版本管理工具就不再说了，这里旨在记录在实际使用git中碰到的可以提高效率的一些命令、做法。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>在所有历史提交中搜索代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git grep $regexp $(git rev-list --all)</span><br></pre></td></tr></table></figure><p>上面命令里, $regexp 是搜索目标对象</p></li></ul><a id="more"></a><ul><li><p>使用git cherry-pick挑选commit合并到本分支</p></li><li><p>git reset –hard [HEAD | commit id …]</p></li><li><p>git reset –soft [HEAD | commit id …]</p></li><li><p>将多个commit合并成一个的方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i [base commit id]</span><br></pre></td></tr></table></figure><p> 注意base commit id是多个commit id之前的那个commit的id，另外只应该rebase尚未推入团队公共分支的commit。</p></li><li><p>暂存本地还未完成且没提交的工作</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>  查看已stash的工作</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>  重新提取则可以使用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>  或</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><p><strong>分离HEAD是什么</strong></p><p>当HEAD处于分离状态（不依附于任一分支）时，提交操作可以正常进行，但是不会更新任何已命名的分支。(你可以认为这是在更新一个匿名分支。)。当你要checkout 其他分支时，git会提示你是否要先保存commit。</p></li><li><p><strong>git pull –rebase 远端分支 具体干了什么?</strong></p><p>  我们都知道一般我们本地对代码做了相应的改动新增了commit，而这时远端代码别人在你push代码之前或同时提交了新饿commit，你就无法直接push了，这时我们可以用git pull –rebase进行rebase后再提交即可。那rebase到底干了什么事? 大概是下面的几个步骤:</p><ul><li>先把你本地提交的代码放到一边。</li><li>然后把服务器上的改动下载下来。</li><li>然后在本地把你之前的改动再重新一个一个地做 commit，直到全部成功。</li></ul></li><li><p><strong>本地多个commit尚未提交，要rebase 远端分支如何做?</strong></p><p>  如果本地只有一个新增commit，则只使用以下这个命令即可，也只需要解决一次冲突。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase [remote upstream] [remote branch]</span><br></pre></td></tr></table></figure><p>  但如果本地有多个新增commit，则需要多次解决冲突，比较繁琐。关于为什么有可能是多次解决冲突，可以参考前文写的内容:</p><blockquote><p>git pull –rebase远端分支，具体干了什么</p></blockquote><p>  对于这种本地有多个新增commit的情况下，如果要避免rebase时出现多次冲突解决的问题，有以下解决方法:</p><ul><li>方法一: 使用git rebase -i [commit id] 先把本地多个commit合并成一个</li><li>方法二: git config –global rerere.enabled true 打开Rerere工具(具体参考 <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-Rerere" target="_blank" rel="noopener">git rerere 工具</a>)</li></ul></li><li><p><strong>在git本地误操作了怎么办?</strong></p><p>  例如使用了git reset –hard HEAD~3误删除了3个commit，那如何恢复呢？</p><p>  这时git reflog就显示出它强大的威力了，它可以查看命令历史，然后借助git reset再回到上次的位置。不过还是建议操作时谨慎，避免这种reset操作。</p></li><li><p><strong>团队使用git开发时，用怎样的工作流比较好？</strong></p><p>  这个我觉得视乎团队、产品各有不同，见仁见智，只有合适，没有最好，很难一概而论。常见的几种：</p><ul><li>中心式协同工作流: 所有人都在远端的master上开发</li><li>功能分支协同工作流: 跟上面基本一致，但功能开发在功能开发子分支上，开发完再合并到master上</li><li>GitFlow 工作流: 需要同时处理master,develop,release,hotfix,feature5种分支,不简单</li><li>GitHub Flow: 开发人员fork repo后自己开发，然后提交pull request，codereview通过后进入master</li><li>GitLab Flow: 在Github Flow基础上引入环境分支</li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>禁止对集成/公共分支进行push –force</strong></li><li><strong>禁止修改集成/公共分支上的历史</strong></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解GIT</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git高效使用技巧&quot;&gt;&lt;a href=&quot;#Git高效使用技巧&quot; class=&quot;headerlink&quot; title=&quot;Git高效使用技巧&quot;&gt;&lt;/a&gt;Git高效使用技巧&lt;/h1&gt;&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;Git是多么强大的版本管理工具就不再说了，这里旨在记录在实际使用git中碰到的可以提高效率的一些命令、做法。&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在所有历史提交中搜索代码&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git grep $regexp $(git rev-list --all)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面命令里, $regexp 是搜索目标对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://tuihub.cn/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://tuihub.cn/tags/git/"/>
    
      <category term="工具使用" scheme="http://tuihub.cn/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Grumpy使用</title>
    <link href="http://tuihub.cn/2017/08/10/How-To-Use-Grump/"/>
    <id>http://tuihub.cn/2017/08/10/How-To-Use-Grump/</id>
    <published>2017-08-10T12:44:09.000Z</published>
    <updated>2019-10-06T00:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grumpy"><a href="#Grumpy" class="headerlink" title="Grumpy"></a>Grumpy</h1><p>grumpy是google的一个开源项目，可以将Python代码编译成Go代码，从而最后编译成静态可执行程序，不再需要VM。 基本上编译的流程是这样：python code –&gt; grumpc –&gt; golang code –&gt; Binary。grumpy意思是Go running Python。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>grumpy包括grumpy compiler(grumpc)、grumpy runtime(golang runtime)、grumpy library(Python third library or golang lib) 三部分。</p><a id="more"></a><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>不支持exec，eval, compile等动态特性，因为grumpy是把Python代码编译成静态的Go代码。</li><li>不支持C扩展</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="方法1-make-run命令行运行"><a href="#方法1-make-run命令行运行" class="headerlink" title="方法1: make run命令行运行"></a>方法1: make run命令行运行</h2><p>最简单的就是在命令行直接执行make run，它实际上是使用了一个grumprun脚本，从标准输入中读取python代码并编译和运行，以下命令默认是在Grumpy源代码根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;print &apos;hello, world&apos;&quot; | make run</span><br></pre></td></tr></table></figure><h2 id="方法2-grumpc-and-grumprun"><a href="#方法2-grumpc-and-grumprun" class="headerlink" title="方法2: grumpc and grumprun:"></a>方法2: grumpc and grumprun:</h2><p>对于复杂的程序，可以使用grumpc编译成Go代码，最后再使用Go build编译成可执行程序。 由于程序最后都是静态链接，所以Grumpy工具链必须在GOPATH路径下能找到所有编译后的Go模块。Grumpy在GOPATH的下__python__子目录查找对应的Go模块。</p><p>首先设置环境变量,主要是Grumpy runtime的目录和Python模块目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">export PATH=$PWD/build/bin:$PATH</span><br><span class="line">export GOPATH=$PWD/build</span><br><span class="line">export PYTHONPATH=$PWD/build/lib/python2.7/site-packages</span><br></pre></td></tr></table></figure><p>先用下面的命令检测环境变量设置有没有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;import sys; print sys.version&apos; | grumprun</span><br></pre></td></tr></table></figure><p>接下来，先写好例子代码放到对应的 __python__子目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;def hello(): print &quot;hello, world&quot;&apos; &gt; $GOPATH/src/__python__/hello.py</span><br></pre></td></tr></table></figure><p>编译成模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/__python__/hello</span><br><span class="line">grumpc -modname=hello $GOPATH/src/__python__/hello.py &gt; $GOPATH/src/__python__/hello/module.go</span><br></pre></td></tr></table></figure><p>现在就可以在python代码中引入”__python__/hello”模块,使用grumprun来运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;from hello import hello; hello()&apos; | grumprun</span><br></pre></td></tr></table></figure><p>1.把python代码编译成Go包<br>2.编写一个Go主程序并且引入第一步生成的包<br>3.执行<code>go run</code> 第二步中的Go程序</p><h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;print &quot;hello, world&quot;&apos; &gt; hello.py</span><br><span class="line">make</span><br><span class="line">export GOPATH=$PWD/build</span><br><span class="line">export PYTHONPATH=$PWD/build/lib/python2.7/site-packages</span><br><span class="line">tools/grumpc hello.py &gt; hello.go</span><br><span class="line">go build -o hello hello.go</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><p>在新的grumpy代码中，使用上面的方法会报错，主要作者尚在优化编译的方法过程中, 后续应该会解决这个问题。<br>具体可以参考这个链接 <a href="https://github.com/google/grumpy/issues/366" target="_blank" rel="noopener">https://github.com/google/grumpy/issues/366</a></p><h2 id="知乎上关于grumpy的评价-可以参考下"><a href="#知乎上关于grumpy的评价-可以参考下" class="headerlink" title="知乎上关于grumpy的评价,可以参考下"></a><a href="https://www.zhihu.com/question/54440711" target="_blank" rel="noopener">知乎上关于grumpy的评价</a>,可以参考下</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Grumpy&quot;&gt;&lt;a href=&quot;#Grumpy&quot; class=&quot;headerlink&quot; title=&quot;Grumpy&quot;&gt;&lt;/a&gt;Grumpy&lt;/h1&gt;&lt;p&gt;grumpy是google的一个开源项目，可以将Python代码编译成Go代码，从而最后编译成静态可执行程序，不再需要VM。 基本上编译的流程是这样：python code –&amp;gt; grumpc –&amp;gt; golang code –&amp;gt; Binary。grumpy意思是Go running Python。&lt;/p&gt;
&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;&gt;&lt;/a&gt;组成&lt;/h2&gt;&lt;p&gt;grumpy包括grumpy compiler(grumpc)、grumpy runtime(golang runtime)、grumpy library(Python third library or golang lib) 三部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://tuihub.cn/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://tuihub.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://tuihub.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Grumpy Go running Python</title>
    <link href="http://tuihub.cn/2017/08/04/Grumpy-Go-running-Python/"/>
    <id>http://tuihub.cn/2017/08/04/Grumpy-Go-running-Python/</id>
    <published>2017-08-04T08:53:35.000Z</published>
    <updated>2019-10-06T00:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html" target="_blank" rel="noopener">https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html</a></p><p>到目前为止，谷歌日常运行着几百万行Python代码。旗下的视频网站YouTube的前端部分、YouTube API都是基于python写的。这些Python程序在生产环境下，承载着每秒几百万的请求。YouTube前端是运行在CPython2.7上的，我们在CPython2.7上为了提高运行性能和调整优化程序，投入了很多工作。虽然这些努力取得了不错的成果，但我们依旧很难避开一个老问题：在CPython之上开发高效并发的程序总是一件很难做好的事。</p><a id="more"></a><p>为了解决这个问题，我们调查查看了许多Python运行时，每个都各有所权衡，但都没有解决Python并发问题的同时而不引入其他问题。所以我们向自己提了一个很疯狂的问题：如果我们能实现一个针对实时服务的运行时的优化方案会怎样呢？一旦我们往这个方向深入问题，使用Go作为基础平台就貌似是一件很不错的选择，因为go的运行特性(例如轻量级线程,goroutine?)很适合我们的情况。我们需要互操作性强的语言，而Go强大的运行时反射系统就可以直接派上用场了。我们觉得Go来承载Python很自然，所以Grumpy项目就应运而生了。</p><p>Grumpy是为Go提供的Python运行时，尚处于实验性阶段。Grumpy将Python代码翻译成Go代码，这些代码可以无缝的运行在Go环境中。因为我们需要支持谷歌现存的庞大的Python代码库，所以对我们来说，兼容并且高度兼容CPython(当然也包括CPython的缺点)就是一件很重要的事。目标就是Grumpy可以拿来即用，直接搞定任何纯Python的项目，而无需修改Python项目的代码。</p><p>我们在设计上做了两个重要的抉择，这些决定同时也带来了一些影响。<br><strong>一、我们决定不支持Python的C扩展模块</strong><br>这意味着Grumpy不能利用Python中大量丰富的C扩展功能，但这样给我们带来很多的灵活性，例如可以灵活地针对并行负载设计API和对象表示。特别要提的一点是，Grumpy没有GIL问题，并且它利用了Go的垃圾收集器来管理对象的生命周期，而不是依赖使用引用计数。我们认为Grumpy在很多实际的工作中，比CPython在扩展上优雅得多。我们可以看下用Grumpy生成Fib数列的情况，跟CPython做比较，一窥Grumpy的潜力。</p><p><img src="/2017/08/04/Grumpy-Go-running-Python/fib_benchmark.png" alt=""></p><p><strong>二、Grumpy并不是一个解释器</strong><br>Grumpy本身的程序是像普通Go程序一样被编译和链接的，这样做的副作用就是开发部署上缺乏灵活性，但它具备一些好处，一是它通过静态程序分析在编译时进行优化，另外最大的好处是它具备了跟Go代码互相协作的能力，这很直接也很强大。Grumpy程序可以导入Go包就像import Python模块一样。例如以下Python代码，它使用了Go标准库中的net/http模块来启动一个简单的http服务器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __go__.net.http <span class="keyword">import</span> ListenAndServe, RedirectHandler</span><br><span class="line"></span><br><span class="line">handler = RedirectHandler(<span class="string">'http://github.com/google/grumpy'</span>, <span class="number">303</span>)</span><br><span class="line">ListenAndServe(<span class="string">'127.0.0.1:8080'</span>, handler)</span><br></pre></td></tr></table></figure><p>我们对Grumpy的前景感到很兴奋，虽然现在Grumpy仍处于aplpha阶段，但绝大多数的语言组件和很多内置核心类型都能正常工作。当然，还有很多事情要做，包括很多内置类型还缺失属性或函数，没有内置函数，标准库实际上是空的。如果你发现有些功能你希望能做到的，可以第一时间提问题给我们，当然了，更好的是给我们贡献代码。</p><p>译注:</p><ul><li><a href="https://github.com/google/grumpy" target="_blank" rel="noopener">Grumpy代码仓库位置</a></li><li>目前Grumpy只支持 Python2.7, 据说Google 的很多代码还是以该版本为主。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，谷歌日常运行着几百万行Python代码。旗下的视频网站YouTube的前端部分、YouTube API都是基于python写的。这些Python程序在生产环境下，承载着每秒几百万的请求。YouTube前端是运行在CPython2.7上的，我们在CPython2.7上为了提高运行性能和调整优化程序，投入了很多工作。虽然这些努力取得了不错的成果，但我们依旧很难避开一个老问题：在CPython之上开发高效并发的程序总是一件很难做好的事。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://tuihub.cn/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://tuihub.cn/tags/Python/"/>
    
      <category term="Go" scheme="http://tuihub.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>DockerHub public images</title>
    <link href="http://tuihub.cn/2017/08/02/DockerHub-public-images/"/>
    <id>http://tuihub.cn/2017/08/02/DockerHub-public-images/</id>
    <published>2017-08-02T07:40:28.000Z</published>
    <updated>2019-10-06T00:24:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前开发人员在机器里总要装一大堆中间件，而且配置复杂，版本又容易冲突。docker真是开发人员的福音从去年开始，公司的一部分环境也使用docker部署，自己的开发机器上也不再搞得那么凌乱了。 </p><p>有人搞了一堆dockerfiles，要什么有什么，平时用来验证点程序，开箱即用。</p><p>GitHub - HariSekhon/Dockerfiles: DockerHub public images - Hadoop, Kafka, ZooKeeper, HBase, Cassandra, Solr / SolrCloud, Apache Drill, Nifi, Serf, Consul, Mesos, Spark standalone, Riak, Alluxio, Jython, Advanced Nagios Plugins Collection / PyTools / Tools repos on CentOS / Ubuntu / Debian / Alpine<br><a href="https://github.com/HariSekhon/Dockerfiles" target="_blank" rel="noopener">https://github.com/HariSekhon/Dockerfiles</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前开发人员在机器里总要装一大堆中间件，而且配置复杂，版本又容易冲突。docker真是开发人员的福音从去年开始，公司的一部分环境也使用docker部署，自己的开发机器上也不再搞得那么凌乱了。 &lt;/p&gt;
&lt;p&gt;有人搞了一堆dockerfiles，要什么有什么，平时用来验证点程
      
    
    </summary>
    
    
      <category term="资源链接" scheme="http://tuihub.cn/categories/%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5/"/>
    
    
      <category term="docker" scheme="http://tuihub.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>机器学习案例视频(转)</title>
    <link href="http://tuihub.cn/2017/07/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%E8%A7%86%E9%A2%91-%E8%BD%AC/"/>
    <id>http://tuihub.cn/2017/07/12/机器学习案例视频-转/</id>
    <published>2017-07-12T06:30:36.000Z</published>
    <updated>2017-08-15T14:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果没记错的话,“数加”应该是国内优秀的专注于大数据及机器学习的公司华院数据旗下的产品。 阿里云的服务是越来越齐全，产品线覆盖方方面面，机器学习当然也不能落下。 移动互联网时代数据是pc互联网的n倍，而2016年国内物联网协议标准落定后，未来数据量估计又得井喷了。 挖掘数据价值的产品将会是每个公司都要考虑的事情。 </p><p>下面是阿里云数加相关的视频资料，mark一下，学习。<br><a href="https://data.aliyun.com/experience" target="_blank" rel="noopener">阿里云数加大数据体验馆-业内首例，帮你轻松玩转DT时代！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果没记错的话,“数加”应该是国内优秀的专注于大数据及机器学习的公司华院数据旗下的产品。 阿里云的服务是越来越齐全，产品线覆盖方方面面，机器学习当然也不能落下。 移动互联网时代数据是pc互联网的n倍，而2016年国内物联网协议标准落定后，未来数据量估计又得井喷了。 挖掘数据
      
    
    </summary>
    
    
      <category term="学习资源" scheme="http://tuihub.cn/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="机器学习" scheme="http://tuihub.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="视频教程" scheme="http://tuihub.cn/tags/%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Serverless Ifttt</title>
    <link href="http://tuihub.cn/2017/07/12/Serverless-Ifttt/"/>
    <id>http://tuihub.cn/2017/07/12/Serverless-Ifttt/</id>
    <published>2017-07-12T02:36:10.000Z</published>
    <updated>2019-10-06T00:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2014年amazon推出lambda，2017年阿里云、腾讯云推出无服务，技术又一轮演变</p><p><a href="http://www.infoq.com/cn/news/2017/06/tengxun-cloud-serverless" target="_blank" rel="noopener">腾讯云无服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2014年amazon推出lambda，2017年阿里云、腾讯云推出无服务，技术又一轮演变&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2017/06/tengxun-cloud-serverless&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="业界动态" scheme="http://tuihub.cn/categories/%E4%B8%9A%E7%95%8C%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="serverless" scheme="http://tuihub.cn/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>Serverless无服务入门</title>
    <link href="http://tuihub.cn/2017/06/29/Serverless%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/"/>
    <id>http://tuihub.cn/2017/06/29/Serverless无服务入门/</id>
    <published>2017-06-29T13:04:08.000Z</published>
    <updated>2017-08-15T14:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>亚马逊开放lambda FAAS，阿里也开始跟上了无服务。看这样子，平台功能越来越强大，一般开发者真的是只能专注于实现“业务”了。</p><p>摘要： 阿里云的函数计算（Function Compute）是基于Serverless这种理论框架下推出弹性海量计算平台，是Serverless的一种实现，函数计算主打的旋律是轻和快，从一定意义上来看也可以认为函数计算就是Serverless的一个Pass平台。</p><p><a href="https://yq.aliyun.com/articles/106379" target="_blank" rel="noopener">阿里云无服务入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;亚马逊开放lambda FAAS，阿里也开始跟上了无服务。看这样子，平台功能越来越强大，一般开发者真的是只能专注于实现“业务”了。&lt;/p&gt;
&lt;p&gt;摘要： 阿里云的函数计算（Function Compute）是基于Serverless这种理论框架下推出弹性海量计算平台，是Se
      
    
    </summary>
    
    
      <category term="学习资源" scheme="http://tuihub.cn/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="serverless" scheme="http://tuihub.cn/tags/serverless/"/>
    
      <category term="无服务" scheme="http://tuihub.cn/tags/%E6%97%A0%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>YC Startup创业课</title>
    <link href="http://tuihub.cn/2017/06/28/YC-Startup/"/>
    <id>http://tuihub.cn/2017/06/28/YC-Startup/</id>
    <published>2017-06-28T14:32:58.000Z</published>
    <updated>2019-10-06T00:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>2年前看过硅谷著名投资机构YC的创业课，最近又浏览看了下，受益匪浅。虽然是几年前的课程了，但对于创业者和冲动想创业的人非常实用，涵盖创业的方方面面。即使互联网讯息万变。有些道理依旧不变。创业人士及准备创业的人士可以看看。</p><p><a href="http://startupclass.club/" target="_blank" rel="noopener">YC创业课中文社区</a></p><p>在此也对辛苦翻译这些视频的同学们表示感谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2年前看过硅谷著名投资机构YC的创业课，最近又浏览看了下，受益匪浅。虽然是几年前的课程了，但对于创业者和冲动想创业的人非常实用，涵盖创业的方方面面。即使互联网讯息万变。有些道理依旧不变。创业人士及准备创业的人士可以看看。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sta
      
    
    </summary>
    
    
      <category term="学习资源" scheme="http://tuihub.cn/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="创业" scheme="http://tuihub.cn/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="YC" scheme="http://tuihub.cn/tags/YC/"/>
    
  </entry>
  
  <entry>
    <title>全球政府区块链技术应用一览(转)</title>
    <link href="http://tuihub.cn/2017/05/12/%E5%85%A8%E7%90%83%E6%94%BF%E5%BA%9C%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E4%B8%80%E8%A7%88-%E8%BD%AC/"/>
    <id>http://tuihub.cn/2017/05/12/全球政府区块链技术应用一览-转/</id>
    <published>2017-05-12T05:22:23.000Z</published>
    <updated>2019-10-06T00:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>区块链这种电子分类账可以记录分布式的电脑网络中的交易。这些记录一旦写入，就不可逆转，因为任何更改都必须先在整个网络进行验证。</p><p>各国政府开始逐渐认识到区块链技术在安全领域的潜力，其中有许多甚至已经开始了区块链在相关领域的应用。</p><p>在这篇文章中，我们为您列出了各国政府正在进行中的区块链计划，随着更多政府加入这一潮流，这份清单也会随之扩张。</p><p><a href="https://qkldx.net/topic/218/%E5%85%A8%E7%90%83%E6%94%BF%E5%BA%9C%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8%E4%B8%80%E8%A7%88" target="_blank" rel="noopener">全文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区块链这种电子分类账可以记录分布式的电脑网络中的交易。这些记录一旦写入，就不可逆转，因为任何更改都必须先在整个网络进行验证。&lt;/p&gt;
&lt;p&gt;各国政府开始逐渐认识到区块链技术在安全领域的潜力，其中有许多甚至已经开始了区块链在相关领域的应用。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们为
      
    
    </summary>
    
    
      <category term="业界动态" scheme="http://tuihub.cn/categories/%E4%B8%9A%E7%95%8C%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="区块链" scheme="http://tuihub.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链技术的价值思考(转)</title>
    <link href="http://tuihub.cn/2017/05/12/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BB%B7%E5%80%BC%E6%80%9D%E8%80%83-%E8%BD%AC/"/>
    <id>http://tuihub.cn/2017/05/12/区块链技术的价值思考-转/</id>
    <published>2017-05-12T04:57:56.000Z</published>
    <updated>2017-08-15T14:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>区块链是一项革命性的技术,目前更多是用在数字资产、数字货币上，但能否未来在各个领域获得更深入的使用，拭目以待。</p><p>转36Kr文章: <a href="https://36kr.com/p/5075592.html" target="_blank" rel="noopener">区块链技术的价值思考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区块链是一项革命性的技术,目前更多是用在数字资产、数字货币上，但能否未来在各个领域获得更深入的使用，拭目以待。&lt;/p&gt;
&lt;p&gt;转36Kr文章: &lt;a href=&quot;https://36kr.com/p/5075592.html&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
      <category term="业界动态" scheme="http://tuihub.cn/categories/%E4%B8%9A%E7%95%8C%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="创业" scheme="http://tuihub.cn/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="区块链" scheme="http://tuihub.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>广告生态圈公司一览</title>
    <link href="http://tuihub.cn/2017/05/02/%E5%B9%BF%E5%91%8A%E7%94%9F%E6%80%81%E5%9C%88%E5%85%AC%E5%8F%B8%E4%B8%80%E8%A7%88/"/>
    <id>http://tuihub.cn/2017/05/02/广告生态圈公司一览/</id>
    <published>2017-05-02T08:26:26.000Z</published>
    <updated>2017-08-15T14:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>互联网公司赖以生存的广告行业生态公司，引用RTB CHINA的一个图片可以见行业内公司之多。</p><p><img src="/2017/05/02/广告生态圈公司一览/dsp.png" alt="广告公司"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;互联网公司赖以生存的广告行业生态公司，引用RTB CHINA的一个图片可以见行业内公司之多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/05/02/广告生态圈公司一览/dsp.png&quot; alt=&quot;广告公司&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="业界动态" scheme="http://tuihub.cn/categories/%E4%B8%9A%E7%95%8C%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="广告dsp" scheme="http://tuihub.cn/tags/%E5%B9%BF%E5%91%8Adsp/"/>
    
  </entry>
  
</feed>
